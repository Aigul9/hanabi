{"ast":null,"code":"var _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/pages/new-game.tsx\";\nvar __jsx = React.createElement;\nimport { keyBy } from \"lodash\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport shortid from \"shortid\";\nimport HomeButton from \"../components/homeButton\";\nimport Button, { ButtonSize } from \"../components/ui/button\";\nimport { Checkbox, Field, Select, TextInput } from \"../components/ui/forms\";\nimport Txt from \"../components/ui/txt\";\nimport { newGame } from \"../game/actions\";\nimport { GameMode, IGameHintsLevel } from \"../game/state\";\nimport useNetwork from \"../hooks/network\";\nconst PlayerCounts = [2, 3, 4, 5];\nconst HintsLevels = {\n  [IGameHintsLevel.DIRECT]: \"Show direct hints\",\n  [IGameHintsLevel.NONE]: \"Do not show hints\"\n};\nconst BotsSpeeds = {\n  0: \"Faster\",\n  1000: \"Fast\",\n  3000: \"Slow\"\n};\nexport default function NewGame() {\n  const router = useRouter();\n  const network = useNetwork();\n  const {\n    offline\n  } = router.query;\n  const {\n    0: showAdvanced,\n    1: setShowAdvanced\n  } = useState(false);\n  const {\n    0: seed,\n    1: setSeed\n  } = useState();\n  const {\n    0: playersCount,\n    1: setPlayersCount\n  } = useState(3);\n  const {\n    0: multicolor,\n    1: setMulticolor\n  } = useState(false);\n  const {\n    0: allowRollback,\n    1: setAllowRollback\n  } = useState(true);\n  const {\n    0: preventLoss,\n    1: setPreventLoss\n  } = useState(false);\n  const {\n    0: private_,\n    1: setPrivate\n  } = useState(false);\n  const {\n    0: hintsLevel,\n    1: setHintsLevel\n  } = useState(IGameHintsLevel.DIRECT);\n  const {\n    0: turnsHistory,\n    1: setTurnsHistory\n  } = useState(true);\n  const {\n    0: botsWait,\n    1: setBotsWait\n  } = useState(1000);\n  /**\n   * Initialise seed on first render\n   */\n\n  useEffect(() => {\n    setSeed(`${Math.round(Math.random() * 10000)}`);\n  }, []);\n\n  async function onCreateGame() {\n    const gameId = shortid();\n    network.updateGame(newGame({\n      id: gameId,\n      multicolor,\n      playersCount,\n      seed,\n      allowRollback,\n      preventLoss,\n      private: private_,\n      hintsLevel,\n      turnsHistory,\n      botsWait,\n      gameMode: offline ? GameMode.PASS_AND_PLAY : GameMode.NETWORK\n    }));\n    router.push(`/play?gameId=${gameId}`);\n  }\n\n  return __jsx(\"div\", {\n    className: \"w-100 h-100 overflow-y-scroll pv4 flex items-center pv6-l relative bg-main-dark ph2 ph3-l shadow-5 br3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(HomeButton, {\n    className: \"absolute top-1 right-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"flex flex-column w-50-m w-50-l w-80\",\n    style: {\n      margin: \"auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"f4 pb4 lavender\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, offline ? `In this pass-and-play mode, you can play offline with multiple\n              players by passing the device to each player on their turn` : `You will be able to play online by sharing the game link to your\n            friends.`), __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Players\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(Select, {\n    className: \"w3 indent\",\n    id: \"players-count\",\n    options: keyBy(PlayerCounts),\n    value: playersCount,\n    onChange: e => setPlayersCount(+e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), __jsx(Field, {\n    label: \"Multicolor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(Checkbox, {\n    checked: multicolor,\n    id: \"multicolor\",\n    onChange: e => setMulticolor(e.target.checked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), __jsx(\"a\", {\n    className: \"mv4 self-end underline pointer silver\",\n    id: \"advanced-options\",\n    onClick: () => setShowAdvanced(!showAdvanced),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(Txt, {\n    value: \"Advanced options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  })), showAdvanced && __jsx(React.Fragment, null, __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Private\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(Checkbox, {\n    checked: private_,\n    onChange: e => setPrivate(e.target.checked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Seed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(TextInput, {\n    className: \"w3 tr\",\n    id: \"seed\",\n    value: seed,\n    onChange: e => setSeed(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Allow rollback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(Checkbox, {\n    checked: allowRollback,\n    onChange: e => setAllowRollback(e.target.checked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Prevent loss\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(Checkbox, {\n    checked: preventLoss,\n    onChange: e => setPreventLoss(e.target.checked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })), __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Hints\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(Select, {\n    className: \"pl3\",\n    options: HintsLevels,\n    value: hintsLevel,\n    onChange: e => setHintsLevel(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), __jsx(Field, {\n    className: \"pb2 mb2 bb b--yellow-light\",\n    label: \"Turns history\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, __jsx(Checkbox, {\n    checked: turnsHistory,\n    onChange: e => setTurnsHistory(e.target.checked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })), __jsx(Field, {\n    label: \"Bots speed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, __jsx(Select, {\n    className: \"pl3\",\n    id: \"bots-speed\",\n    options: BotsSpeeds,\n    value: botsWait,\n    onChange: e => setBotsWait(+e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"flex flex-1 justify-end w-75\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, __jsx(Button, {\n    className: \"flex-1 justify-end mt5\",\n    id: \"new-game\",\n    size: ButtonSize.LARGE,\n    text: \"New game\",\n    onClick: onCreateGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/pages/new-game.tsx"],"names":["keyBy","useRouter","React","useEffect","useState","shortid","HomeButton","Button","ButtonSize","Checkbox","Field","Select","TextInput","Txt","newGame","GameMode","IGameHintsLevel","useNetwork","PlayerCounts","HintsLevels","DIRECT","NONE","BotsSpeeds","NewGame","router","network","offline","query","showAdvanced","setShowAdvanced","seed","setSeed","playersCount","setPlayersCount","multicolor","setMulticolor","allowRollback","setAllowRollback","preventLoss","setPreventLoss","private_","setPrivate","hintsLevel","setHintsLevel","turnsHistory","setTurnsHistory","botsWait","setBotsWait","Math","round","random","onCreateGame","gameId","updateGame","id","private","gameMode","PASS_AND_PLAY","NETWORK","push","margin","e","target","value","checked","LARGE"],"mappings":"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","sourcesContent":["import { keyBy } from \"lodash\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport shortid from \"shortid\";\n\nimport HomeButton from \"~/components/homeButton\";\nimport Button, { ButtonSize } from \"~/components/ui/button\";\nimport { Checkbox, Field, Select, TextInput } from \"~/components/ui/forms\";\nimport Txt from \"~/components/ui/txt\";\nimport { newGame } from \"~/game/actions\";\nimport { GameMode, IGameHintsLevel } from \"~/game/state\";\nimport useNetwork from \"~/hooks/network\";\n\nconst PlayerCounts = [2, 3, 4, 5];\n\nconst HintsLevels = {\n  [IGameHintsLevel.DIRECT]: \"Show direct hints\",\n  [IGameHintsLevel.NONE]: \"Do not show hints\"\n};\n\nconst BotsSpeeds = {\n  0: \"Faster\",\n  1000: \"Fast\",\n  3000: \"Slow\"\n};\n\nexport default function NewGame() {\n  const router = useRouter();\n  const network = useNetwork();\n  const { offline } = router.query;\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [seed, setSeed] = useState<string>();\n  const [playersCount, setPlayersCount] = useState(3);\n  const [multicolor, setMulticolor] = useState(false);\n  const [allowRollback, setAllowRollback] = useState(true);\n  const [preventLoss, setPreventLoss] = useState(false);\n  const [private_, setPrivate] = useState(false);\n  const [hintsLevel, setHintsLevel] = useState(IGameHintsLevel.DIRECT);\n  const [turnsHistory, setTurnsHistory] = useState(true);\n  const [botsWait, setBotsWait] = useState(1000);\n\n  /**\n   * Initialise seed on first render\n   */\n  useEffect(() => {\n    setSeed(`${Math.round(Math.random() * 10000)}`);\n  }, []);\n\n  async function onCreateGame() {\n    const gameId = shortid();\n\n    network.updateGame(\n      newGame({\n        id: gameId,\n        multicolor,\n        playersCount,\n        seed,\n        allowRollback,\n        preventLoss,\n        private: private_,\n        hintsLevel,\n        turnsHistory,\n        botsWait,\n        gameMode: offline ? GameMode.PASS_AND_PLAY : GameMode.NETWORK\n      })\n    );\n\n    router.push(`/play?gameId=${gameId}`);\n  }\n\n  return (\n    <div className=\"w-100 h-100 overflow-y-scroll pv4 flex items-center pv6-l relative bg-main-dark ph2 ph3-l shadow-5 br3\">\n      <HomeButton className=\"absolute top-1 right-1\" />\n      <div\n        className=\"flex flex-column w-50-m w-50-l w-80\"\n        style={{ margin: \"auto\" }}\n      >\n        <div className=\"f4 pb4 lavender\">\n          {offline\n            ? `In this pass-and-play mode, you can play offline with multiple\n              players by passing the device to each player on their turn`\n            : `You will be able to play online by sharing the game link to your\n            friends.`}\n        </div>\n        <Field className=\"pb2 mb2 bb b--yellow-light\" label=\"Players\">\n          <Select\n            className=\"w3 indent\"\n            id=\"players-count\"\n            options={keyBy(PlayerCounts)}\n            value={playersCount}\n            onChange={e => setPlayersCount(+e.target.value)}\n          />\n        </Field>\n\n        <Field label=\"Multicolor\">\n          <Checkbox\n            checked={multicolor}\n            id=\"multicolor\"\n            onChange={e => setMulticolor(e.target.checked)}\n          />\n        </Field>\n\n        <a\n          className=\"mv4 self-end underline pointer silver\"\n          id=\"advanced-options\"\n          onClick={() => setShowAdvanced(!showAdvanced)}\n        >\n          <Txt value=\"Advanced options\" />\n        </a>\n\n        {showAdvanced && (\n          <>\n            <Field className=\"pb2 mb2 bb b--yellow-light\" label=\"Private\">\n              <Checkbox\n                checked={private_}\n                onChange={e => setPrivate(e.target.checked)}\n              />\n            </Field>\n\n            <Field className=\"pb2 mb2 bb b--yellow-light\" label=\"Seed\">\n              <TextInput\n                className=\"w3 tr\"\n                id=\"seed\"\n                value={seed}\n                onChange={e => setSeed(e.target.value)}\n              />\n            </Field>\n\n            <Field\n              className=\"pb2 mb2 bb b--yellow-light\"\n              label=\"Allow rollback\"\n            >\n              <Checkbox\n                checked={allowRollback}\n                onChange={e => setAllowRollback(e.target.checked)}\n              />\n            </Field>\n\n            <Field className=\"pb2 mb2 bb b--yellow-light\" label=\"Prevent loss\">\n              <Checkbox\n                checked={preventLoss}\n                onChange={e => setPreventLoss(e.target.checked)}\n              />\n            </Field>\n\n            <Field className=\"pb2 mb2 bb b--yellow-light\" label=\"Hints\">\n              <Select\n                className=\"pl3\"\n                options={HintsLevels}\n                value={hintsLevel}\n                onChange={e => setHintsLevel(e.target.value as IGameHintsLevel)}\n              />\n            </Field>\n\n            <Field className=\"pb2 mb2 bb b--yellow-light\" label=\"Turns history\">\n              <Checkbox\n                checked={turnsHistory}\n                onChange={e => setTurnsHistory(e.target.checked)}\n              />\n            </Field>\n\n            <Field label=\"Bots speed\">\n              <Select\n                className=\"pl3\"\n                id=\"bots-speed\"\n                options={BotsSpeeds}\n                value={botsWait}\n                onChange={e => setBotsWait(+e.target.value)}\n              />\n            </Field>\n          </>\n        )}\n        <div className=\"flex flex-1 justify-end w-75\">\n          <Button\n            className=\"flex-1 justify-end mt5\"\n            id=\"new-game\"\n            size={ButtonSize.LARGE}\n            text=\"New game\"\n            onClick={onCreateGame}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}