{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"firebase/database\";\nimport firebase from \"firebase/app\";\nimport { fillEmptyValues, IGameStatus } from \"../game/state\";\nexport function setupFirebase() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(_objectSpread({}, process.env.FIREBASE_DATABASE_URL && {\n      databaseURL: process.env.FIREBASE_DATABASE_URL\n    }, {}, process.env.FIREBASE_API_KEY && {\n      apiKey: process.env.FIREBASE_API_KEY,\n      authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n      databaseURL: process.env.FIREBASE_DATABASE_URL,\n      projectId: process.env.FIREBASE_PROJECT_ID,\n      storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n      messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n      appId: process.env.FIREBASE_APP_ID\n    }));\n  }\n\n  return firebase.database();\n}\n\nfunction gameIsPublic(game) {\n  return !game.options.private && game.status === IGameStatus.LOBBY && game.players.length && game.players.length < game.options.playersCount;\n}\n\nexport default class FirebaseNetwork {\n  constructor(db) {\n    _defineProperty(this, \"db\", void 0);\n\n    this.db = db || setupFirebase();\n  }\n\n  subscribeToPublicGames(callback) {\n    const ref = this.db.ref(\"/games\") // Only games created less than 10 minutes ago\n    .orderByChild(\"createdAt\").startAt(Date.now() - 10 * 60 * 1000);\n    ref.on(\"value\", event => {\n      const games = Object.values(event.val() || {}).map(fillEmptyValues) // Game is public\n      .filter(gameIsPublic);\n      callback(games);\n    });\n    return () => ref.off();\n  }\n\n  subscribeToGame(gameId, callback) {\n    const ref = this.db.ref(`/games/${gameId}`);\n    ref.on(\"value\", event => {\n      callback(fillEmptyValues(event.val()));\n    });\n    const localGame = JSON.parse(localStorage.getItem(`game.${gameId}`));\n\n    if (localGame) {\n      callback(localGame);\n    }\n\n    return () => ref.off();\n  }\n\n  async updateGame(game) {\n    localStorage.setItem(`game.${game.id}`, JSON.stringify(game));\n    await this.db.ref(`/games/${game.id}`).set(game);\n  }\n\n  async setReaction(game, player, reaction) {\n    await this.db.ref(`/games/${game.id}/players/${player.index}/reaction`).set(reaction);\n  }\n\n  async setNotification(game, player, notified) {\n    await this.db.ref(`/games/${game.id}/players/${player.index}/notified`).set(notified);\n  }\n\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/hooks/firebase.ts"],"names":["firebase","fillEmptyValues","IGameStatus","setupFirebase","apps","length","initializeApp","process","env","FIREBASE_DATABASE_URL","databaseURL","FIREBASE_API_KEY","apiKey","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","database","gameIsPublic","game","options","private","status","LOBBY","players","playersCount","FirebaseNetwork","constructor","db","subscribeToPublicGames","callback","ref","orderByChild","startAt","Date","now","on","event","games","Object","values","val","map","filter","off","subscribeToGame","gameId","localGame","JSON","parse","localStorage","getItem","updateGame","setItem","id","stringify","set","setReaction","player","reaction","index","setNotification","notified"],"mappings":"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","sourcesContent":["import \"firebase/database\";\n\nimport firebase from \"firebase/app\";\n\nimport IGameState, {\n  fillEmptyValues,\n  IGameStatus,\n  IPlayer\n} from \"~/game/state\";\nimport { GameHandler, GamesHandler, Network } from \"~/hooks/network\";\n\nexport function setupFirebase() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp({\n      // Local database configuration using firebase-server\n      ...(process.env.FIREBASE_DATABASE_URL && {\n        databaseURL: process.env.FIREBASE_DATABASE_URL\n      }),\n      // Online database configuration\n      ...(process.env.FIREBASE_API_KEY && {\n        apiKey: process.env.FIREBASE_API_KEY,\n        authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n        databaseURL: process.env.FIREBASE_DATABASE_URL,\n        projectId: process.env.FIREBASE_PROJECT_ID,\n        storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n        messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n        appId: process.env.FIREBASE_APP_ID\n      })\n    });\n  }\n\n  return firebase.database();\n}\n\nfunction gameIsPublic(game: IGameState) {\n  return (\n    !game.options.private &&\n    game.status === IGameStatus.LOBBY &&\n    game.players.length &&\n    game.players.length < game.options.playersCount\n  );\n}\n\nexport default class FirebaseNetwork implements Network {\n  db: firebase.database.Database;\n\n  constructor(db?: firebase.database.Database) {\n    this.db = db || setupFirebase();\n  }\n\n  subscribeToPublicGames(callback: GamesHandler) {\n    const ref = this.db\n      .ref(\"/games\")\n      // Only games created less than 10 minutes ago\n      .orderByChild(\"createdAt\")\n      .startAt(Date.now() - 10 * 60 * 1000);\n\n    ref.on(\"value\", event => {\n      const games = Object.values(event.val() || {})\n        .map(fillEmptyValues)\n        // Game is public\n        .filter(gameIsPublic);\n\n      callback(games);\n    });\n\n    return () => ref.off();\n  }\n\n  subscribeToGame(gameId: string, callback: GameHandler) {\n    const ref = this.db.ref(`/games/${gameId}`);\n\n    ref.on(\"value\", event => {\n      callback(fillEmptyValues(event.val() as IGameState));\n    });\n\n    const localGame = JSON.parse(localStorage.getItem(`game.${gameId}`));\n    if (localGame) {\n      callback(localGame);\n    }\n\n    return () => ref.off();\n  }\n\n  async updateGame(game: IGameState) {\n    localStorage.setItem(`game.${game.id}`, JSON.stringify(game));\n\n    await this.db.ref(`/games/${game.id}`).set(game);\n  }\n\n  async setReaction(game: IGameState, player: IPlayer, reaction: string) {\n    await this.db\n      .ref(`/games/${game.id}/players/${player.index}/reaction`)\n      .set(reaction);\n  }\n\n  async setNotification(game: IGameState, player: IPlayer, notified: boolean) {\n    await this.db\n      .ref(`/games/${game.id}/players/${player.index}/notified`)\n      .set(notified);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}