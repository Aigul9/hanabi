{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"firebase/database\";\nimport firebase from \"firebase/app\";\nimport { fillEmptyValues, IGameStatus } from \"../game/state\";\nexport function setupFirebase() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(_objectSpread({}, process.env.FIREBASE_DATABASE_URL && {\n      databaseURL: process.env.FIREBASE_DATABASE_URL\n    }, {}, process.env.FIREBASE_API_KEY && {\n      apiKey: process.env.FIREBASE_API_KEY,\n      authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n      databaseURL: process.env.FIREBASE_DATABASE_URL,\n      projectId: process.env.FIREBASE_PROJECT_ID,\n      storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n      messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n      appId: process.env.FIREBASE_APP_ID\n    }));\n  }\n\n  return firebase.database();\n}\n\nfunction gameIsPublic(game) {\n  return !game.options[\"private\"] && game.status === IGameStatus.LOBBY && game.players.length && game.players.length < game.options.playersCount;\n}\n\nvar FirebaseNetwork =\n/*#__PURE__*/\nfunction () {\n  function FirebaseNetwork(db) {\n    _classCallCheck(this, FirebaseNetwork);\n\n    _defineProperty(this, \"db\", void 0);\n\n    this.db = db || setupFirebase();\n  }\n\n  _createClass(FirebaseNetwork, [{\n    key: \"subscribeToPublicGames\",\n    value: function subscribeToPublicGames(callback) {\n      var ref = this.db.ref(\"/games\") // Only games created less than 10 minutes ago\n      .orderByChild(\"createdAt\").startAt(Date.now() - 10 * 60 * 1000);\n      ref.on(\"value\", function (event) {\n        var games = Object.values(event.val() || {}).map(fillEmptyValues) // Game is public\n        .filter(gameIsPublic);\n        callback(games);\n      });\n      return function () {\n        return ref.off();\n      };\n    }\n  }, {\n    key: \"subscribeToGame\",\n    value: function subscribeToGame(gameId, callback) {\n      var ref = this.db.ref(\"/games/\".concat(gameId));\n      ref.on(\"value\", function (event) {\n        callback(fillEmptyValues(event.val()));\n      });\n      var localGame = JSON.parse(localStorage.getItem(\"game.\".concat(gameId)));\n\n      if (localGame) {\n        callback(localGame);\n      }\n\n      return function () {\n        return ref.off();\n      };\n    }\n  }, {\n    key: \"updateGame\",\n    value: function updateGame(game) {\n      return _regeneratorRuntime.async(function updateGame$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              localStorage.setItem(\"game.\".concat(game.id), JSON.stringify(game));\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.db.ref(\"/games/\".concat(game.id)).set(game));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"setReaction\",\n    value: function setReaction(game, player, reaction) {\n      return _regeneratorRuntime.async(function setReaction$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.db.ref(\"/games/\".concat(game.id, \"/players/\").concat(player.index, \"/reaction\")).set(reaction));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"setNotification\",\n    value: function setNotification(game, player, notified) {\n      return _regeneratorRuntime.async(function setNotification$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.db.ref(\"/games/\".concat(game.id, \"/players/\").concat(player.index, \"/notified\")).set(notified));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return FirebaseNetwork;\n}();\n\nexport { FirebaseNetwork as default };","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/hooks/firebase.ts"],"names":["firebase","fillEmptyValues","IGameStatus","setupFirebase","apps","length","initializeApp","process","env","FIREBASE_DATABASE_URL","databaseURL","FIREBASE_API_KEY","apiKey","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","database","gameIsPublic","game","options","status","LOBBY","players","playersCount","FirebaseNetwork","db","callback","ref","orderByChild","startAt","Date","now","on","event","games","Object","values","val","map","filter","off","gameId","localGame","JSON","parse","localStorage","getItem","setItem","id","stringify","set","player","reaction","index","notified"],"mappings":"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","sourcesContent":["import \"firebase/database\";\n\nimport firebase from \"firebase/app\";\n\nimport IGameState, {\n  fillEmptyValues,\n  IGameStatus,\n  IPlayer\n} from \"~/game/state\";\nimport { GameHandler, GamesHandler, Network } from \"~/hooks/network\";\n\nexport function setupFirebase() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp({\n      // Local database configuration using firebase-server\n      ...(process.env.FIREBASE_DATABASE_URL && {\n        databaseURL: process.env.FIREBASE_DATABASE_URL\n      }),\n      // Online database configuration\n      ...(process.env.FIREBASE_API_KEY && {\n        apiKey: process.env.FIREBASE_API_KEY,\n        authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n        databaseURL: process.env.FIREBASE_DATABASE_URL,\n        projectId: process.env.FIREBASE_PROJECT_ID,\n        storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n        messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n        appId: process.env.FIREBASE_APP_ID\n      })\n    });\n  }\n\n  return firebase.database();\n}\n\nfunction gameIsPublic(game: IGameState) {\n  return (\n    !game.options.private &&\n    game.status === IGameStatus.LOBBY &&\n    game.players.length &&\n    game.players.length < game.options.playersCount\n  );\n}\n\nexport default class FirebaseNetwork implements Network {\n  db: firebase.database.Database;\n\n  constructor(db?: firebase.database.Database) {\n    this.db = db || setupFirebase();\n  }\n\n  subscribeToPublicGames(callback: GamesHandler) {\n    const ref = this.db\n      .ref(\"/games\")\n      // Only games created less than 10 minutes ago\n      .orderByChild(\"createdAt\")\n      .startAt(Date.now() - 10 * 60 * 1000);\n\n    ref.on(\"value\", event => {\n      const games = Object.values(event.val() || {})\n        .map(fillEmptyValues)\n        // Game is public\n        .filter(gameIsPublic);\n\n      callback(games);\n    });\n\n    return () => ref.off();\n  }\n\n  subscribeToGame(gameId: string, callback: GameHandler) {\n    const ref = this.db.ref(`/games/${gameId}`);\n\n    ref.on(\"value\", event => {\n      callback(fillEmptyValues(event.val() as IGameState));\n    });\n\n    const localGame = JSON.parse(localStorage.getItem(`game.${gameId}`));\n    if (localGame) {\n      callback(localGame);\n    }\n\n    return () => ref.off();\n  }\n\n  async updateGame(game: IGameState) {\n    localStorage.setItem(`game.${game.id}`, JSON.stringify(game));\n\n    await this.db.ref(`/games/${game.id}`).set(game);\n  }\n\n  async setReaction(game: IGameState, player: IPlayer, reaction: string) {\n    await this.db\n      .ref(`/games/${game.id}/players/${player.index}/reaction`)\n      .set(reaction);\n  }\n\n  async setNotification(game: IGameState, player: IPlayer, notified: boolean) {\n    await this.db\n      .ref(`/games/${game.id}/players/${player.index}/notified`)\n      .set(notified);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}