{"ast":null,"code":"var _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/components/ui/txt.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport classnames from \"classnames\";\nimport React from \"react\";\nexport let TxtSize;\n\n(function (TxtSize) {\n  TxtSize[\"SMALL\"] = \"small\";\n  TxtSize[\"MEDIUM\"] = \"medium\";\n  TxtSize[\"LARGE\"] = \"large\";\n})(TxtSize || (TxtSize = {}));\n\nconst TxtSizes = {\n  [TxtSize.SMALL]: \"f6 f4-l\",\n  [TxtSize.MEDIUM]: \"f4 f3-l\",\n  [TxtSize.LARGE]: \"ttu f2 f1-l tracked\"\n};\nexport default function Txt(props) {\n  const {\n    size = TxtSize.SMALL,\n    italic = false,\n    uppercase = false,\n    multiline = false,\n    value: content,\n    children,\n    className\n  } = props,\n        attributes = _objectWithoutProperties(props, [\"size\", \"italic\", \"uppercase\", \"multiline\", \"value\", \"children\", \"className\"]);\n\n  return __jsx(\"span\", _extends({\n    className: classnames(TxtSizes[size], {\n      ttu: uppercase\n    }, {\n      i: italic\n    }, {\n      \"pre-line\": multiline\n    }, className)\n  }, attributes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), content !== undefined ? content : children);\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/components/ui/txt.tsx"],"names":["classnames","React","TxtSize","TxtSizes","SMALL","MEDIUM","LARGE","Txt","props","size","italic","uppercase","multiline","value","content","children","className","attributes","ttu","i","undefined"],"mappings":";;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAiD,OAAjD;AAEA,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;GAAAA,O,KAAAA,O;;AAMZ,MAAMC,QAAQ,GAAG;AACf,GAACD,OAAO,CAACE,KAAT,GAAiB,SADF;AAEf,GAACF,OAAO,CAACG,MAAT,GAAkB,SAFH;AAGf,GAACH,OAAO,CAACI,KAAT,GAAiB;AAHF,CAAjB;AAcA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAA2B;AACxC,QAAM;AACJC,IAAAA,IAAI,GAAGP,OAAO,CAACE,KADX;AAEJM,IAAAA,MAAM,GAAG,KAFL;AAGJC,IAAAA,SAAS,GAAG,KAHR;AAIJC,IAAAA,SAAS,GAAG,KAJR;AAKJC,IAAAA,KAAK,EAAEC,OALH;AAMJC,IAAAA,QANI;AAOJC,IAAAA;AAPI,MASFR,KATJ;AAAA,QAQKS,UARL,4BASIT,KATJ;;AAWA,SACE;AACE,IAAA,SAAS,EAAER,UAAU,CACnBG,QAAQ,CAACM,IAAD,CADW,EAEnB;AAAES,MAAAA,GAAG,EAAEP;AAAP,KAFmB,EAGnB;AAAEQ,MAAAA,CAAC,EAAET;AAAL,KAHmB,EAInB;AAAE,kBAAYE;AAAd,KAJmB,EAKnBI,SALmB;AADvB,KAQMC,UARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUGH,OAAO,KAAKM,SAAZ,GAAwBN,OAAxB,GAAkCC,QAVrC,CADF;AAcD","sourcesContent":["import classnames from \"classnames\";\nimport React, { HTMLAttributes, ReactNode } from \"react\";\n\nexport enum TxtSize {\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\"\n}\n\nconst TxtSizes = {\n  [TxtSize.SMALL]: \"f6 f4-l\",\n  [TxtSize.MEDIUM]: \"f4 f3-l\",\n  [TxtSize.LARGE]: \"ttu f2 f1-l tracked\"\n};\n\ninterface Props extends HTMLAttributes<HTMLSpanElement> {\n  italic?: boolean;\n  uppercase?: boolean;\n  multiline?: boolean;\n  size?: TxtSize;\n  value?: ReactNode;\n}\n\nexport default function Txt(props: Props) {\n  const {\n    size = TxtSize.SMALL,\n    italic = false,\n    uppercase = false,\n    multiline = false,\n    value: content,\n    children,\n    className,\n    ...attributes\n  } = props;\n\n  return (\n    <span\n      className={classnames(\n        TxtSizes[size],\n        { ttu: uppercase },\n        { i: italic },\n        { \"pre-line\": multiline },\n        className\n      )}\n      {...attributes}\n    >\n      {content !== undefined ? content : children}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}