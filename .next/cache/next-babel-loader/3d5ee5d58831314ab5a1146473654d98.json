{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n/**\n * Store the previous value of the given value for later comparison\n * @see https://usehooks.com/usePrevious/\n */\n\nexport default function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/hooks/previous.ts"],"names":["useEffect","useRef","usePrevious","value","ref","current"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA;;;;;AAIA,eAAe,SAASC,WAAT,CAAwBC,KAAxB,EAAqC;AAClD;AACA;AACA,QAAMC,GAAG,GAAGH,MAAM,EAAlB,CAHkD,CAKlD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CANkD,CAQrC;AAEb;;AACA,SAAOC,GAAG,CAACC,OAAX;AACD","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n/**\n * Store the previous value of the given value for later comparison\n * @see https://usehooks.com/usePrevious/\n */\nexport default function usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}