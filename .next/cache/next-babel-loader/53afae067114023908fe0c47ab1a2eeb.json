{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/components/instructionsArea.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport posed, { PoseGroup } from \"react-pose\";\nimport Turn from \"./turn\";\nimport Tutorial, { ITutorialStep } from \"./tutorial\";\nimport Button, { ButtonSize } from \"./ui/button\";\nimport Txt, { TxtSize } from \"./ui/txt\";\nimport { isReplayMode } from \"../game/actions\";\nimport { GameMode, IGameStatus } from \"../game/state\";\nimport { useGame, useSelfPlayer } from \"../hooks/game\";\nexport default function InstructionsArea(props) {\n  var interturn = props.interturn,\n      onReplay = props.onReplay;\n  var game = useGame();\n  var selfPlayer = useSelfPlayer();\n  var history = isReplayMode(game) ? game.originalGame.turnsHistory.slice(0, game.replayCursor) : game.turnsHistory;\n  var showHistory = isReplayMode(game) ? true : history;\n  var showSync = game.options.gameMode === GameMode.NETWORK;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(Tutorial, {\n    placement: \"below\",\n    step: ITutorialStep.WELCOME,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, game.status === IGameStatus.OVER && __jsx(\"div\", {\n    className: \"flex justify-between items-center mb2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, !isReplayMode(game) && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"flex flex-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Txt, {\n    className: \"db\",\n    size: TxtSize.MEDIUM,\n    value: \"The game is over!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), __jsx(Txt, {\n    className: \"db\",\n    size: TxtSize.MEDIUM,\n    value: \"Your score is \".concat(game.playedCards.length, \" \\uD83C\\uDF89\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), __jsx(Button, {\n    className: \"ml3 nowrap\",\n    size: ButtonSize.TINY,\n    text: \"Watch replay\",\n    onClick: function onClick() {\n      return onReplay();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })))), showHistory && __jsx(\"div\", {\n    className: \"relative\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(PoseGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, _toConsumableArray(history).reverse().map(function (turn, i) {\n    var key = history.length - i;\n    var syncing = i === 0 && !game.synced;\n\n    var style = _objectSpread({}, showSync && syncing && {\n      animation: \"OpacityPulse 2000ms infinite\"\n    });\n\n    var PoseItem = isReplayMode(game) ? posed.div() : Item;\n    return __jsx(PoseItem, {\n      key: key,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(Turn, {\n      key: key,\n      includePlayer: true,\n      showDrawn: !interturn && game.players[turn.action.from].id !== selfPlayer.id,\n      turn: turn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), showSync && syncing && __jsx(Txt, {\n      className: \"ml2\",\n      size: TxtSize.SMALL,\n      value: \"\\u23F3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }))));\n}\nvar Item = posed.div({\n  enter: {\n    y: 0\n  },\n  exit: {\n    y: -100\n  }\n});","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/components/instructionsArea.tsx"],"names":["React","posed","PoseGroup","Turn","Tutorial","ITutorialStep","Button","ButtonSize","Txt","TxtSize","isReplayMode","GameMode","IGameStatus","useGame","useSelfPlayer","InstructionsArea","props","interturn","onReplay","game","selfPlayer","history","originalGame","turnsHistory","slice","replayCursor","showHistory","showSync","options","gameMode","NETWORK","WELCOME","status","OVER","MEDIUM","playedCards","length","TINY","reverse","map","turn","i","key","syncing","synced","style","animation","PoseItem","div","Item","players","action","from","id","SMALL","enter","y","exit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport posed, { PoseGroup } from \"react-pose\";\n\nimport Turn from \"~/components/turn\";\nimport Tutorial, { ITutorialStep } from \"~/components/tutorial\";\nimport Button, { ButtonSize } from \"~/components/ui/button\";\nimport Txt, { TxtSize } from \"~/components/ui/txt\";\nimport { isReplayMode } from \"~/game/actions\";\nimport { GameMode, IGameStatus } from \"~/game/state\";\nimport { useGame, useSelfPlayer } from \"~/hooks/game\";\n\ninterface Props {\n  interturn: boolean;\n  onSelectDiscard: Function;\n  onReplay: Function;\n}\n\nexport default function InstructionsArea(props: Props) {\n  const { interturn, onReplay } = props;\n\n  const game = useGame();\n  const selfPlayer = useSelfPlayer();\n\n  const history = isReplayMode(game)\n    ? game.originalGame.turnsHistory.slice(0, game.replayCursor)\n    : game.turnsHistory;\n\n  const showHistory = isReplayMode(game) ? true : history;\n  const showSync = game.options.gameMode === GameMode.NETWORK;\n  return (\n    <div>\n      <Tutorial placement=\"below\" step={ITutorialStep.WELCOME}>\n        {game.status === IGameStatus.OVER && (\n          <div className=\"flex justify-between items-center mb2\">\n            {!isReplayMode(game) && (\n              <>\n                <div className=\"flex flex-column\">\n                  <Txt\n                    className=\"db\"\n                    size={TxtSize.MEDIUM}\n                    value={`The game is over!`}\n                  />\n                  <Txt\n                    className=\"db\"\n                    size={TxtSize.MEDIUM}\n                    value={`Your score is ${game.playedCards.length} 🎉`}\n                  />\n                </div>\n                <Button\n                  className=\"ml3 nowrap\"\n                  size={ButtonSize.TINY}\n                  text=\"Watch replay\"\n                  onClick={() => onReplay()}\n                />\n              </>\n            )}\n          </div>\n        )}\n      </Tutorial>\n\n      {showHistory && (\n        <div className=\"relative\">\n          <PoseGroup>\n            {[...history].reverse().map((turn, i) => {\n              const key = history.length - i;\n              const syncing = i === 0 && !game.synced;\n              const style = {\n                ...(showSync &&\n                  syncing && { animation: \"OpacityPulse 2000ms infinite\" })\n              };\n              const PoseItem = isReplayMode(game) ? posed.div() : Item;\n\n              return (\n                <PoseItem key={key} style={style}>\n                  <Turn\n                    key={key}\n                    includePlayer={true}\n                    showDrawn={\n                      !interturn &&\n                      game.players[turn.action.from].id !== selfPlayer.id\n                    }\n                    turn={turn}\n                  />\n                  {showSync && syncing && (\n                    <Txt className=\"ml2\" size={TxtSize.SMALL} value=\"⏳\" />\n                  )}\n                </PoseItem>\n              );\n            })}\n          </PoseGroup>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst Item = posed.div({ enter: { y: 0 }, exit: { y: -100 } });\n"]},"metadata":{},"sourceType":"module"}