{"ast":null,"code":"var _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/components/tutorial.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Popover from \"react-popover\";\nimport posed from \"react-pose\";\nimport Button, { ButtonSize } from \"./ui/button\";\nimport Txt, { TxtSize } from \"./ui/txt\";\nexport const TutorialContext = React.createContext(null);\nconst LocalStorageKey = \"tutorialStep\";\nconst HighlightedArea = posed.div({\n  attention: {\n    opacity: 0.7,\n    transition: {\n      type: \"spring\",\n      stiffness: 10,\n      damping: 0\n    }\n  }\n});\nexport let ITutorialStep;\n\n(function (ITutorialStep) {\n  ITutorialStep[ITutorialStep[\"WELCOME\"] = 0] = \"WELCOME\";\n  ITutorialStep[ITutorialStep[\"PLAYED_CARDS\"] = 1] = \"PLAYED_CARDS\";\n  ITutorialStep[ITutorialStep[\"DISCARD_PILE\"] = 2] = \"DISCARD_PILE\";\n  ITutorialStep[ITutorialStep[\"SELF_PLAYER\"] = 3] = \"SELF_PLAYER\";\n  ITutorialStep[ITutorialStep[\"OTHER_PLAYERS\"] = 4] = \"OTHER_PLAYERS\";\n  ITutorialStep[ITutorialStep[\"HINT_TOKENS\"] = 5] = \"HINT_TOKENS\";\n  ITutorialStep[ITutorialStep[\"STRIKE_TOKENS\"] = 6] = \"STRIKE_TOKENS\";\n})(ITutorialStep || (ITutorialStep = {}));\n\nconst steps = {\n  [ITutorialStep.WELCOME]: {\n    title: \"Welcome!\",\n    body: \"Let's learn how to play\"\n  },\n  [ITutorialStep.PLAYED_CARDS]: {\n    title: \"Played cards\",\n    body: \"This will nest the cards that have been played.\\nReach 5 on each color to win the game.\"\n  },\n  [ITutorialStep.DISCARD_PILE]: {\n    title: \"Discard\",\n    body: \"This pile contains all the cards you discarded.\\nWatch out and avoid discarding the cards you need to finish the game.\"\n  },\n  [ITutorialStep.SELF_PLAYER]: {\n    title: \"Your game\",\n    body: \"These are your cards.\\nYou can't see them, but other players can and will give you hints about them.\"\n  },\n  [ITutorialStep.OTHER_PLAYERS]: {\n    title: \"Teammates\",\n    body: \"These are your teammates.\\nLike you, they can't see their cards.\\nGive them hints to help them play or discard cards\"\n  },\n  [ITutorialStep.HINT_TOKENS]: {\n    title: \"Hint tokens\",\n    body: \"- Giving a hint costs 1 hint token.\\n- Discarding a card grants 1 hint token.\\n- Playing a 5 gives 1 hint token as a bonus\"\n  },\n  [ITutorialStep.STRIKE_TOKENS]: {\n    title: \"Strike tokens\",\n    body: \"Playing a wrong card will discard it and cost you 1 strike token.\\nReaching 3 strike tokens will instantly lose the game.\"\n  }\n};\nexport function TutorialProvider(props) {\n  const {\n    children\n  } = props;\n  const {\n    0: currentStep,\n    1: setCurrentStep\n  } = useState(+localStorage.getItem(LocalStorageKey) || ITutorialStep.WELCOME);\n\n  function setStep(step) {\n    setCurrentStep(step);\n    localStorage.setItem(LocalStorageKey, step.toString());\n  }\n\n  const count = Object.keys(steps).length;\n  return __jsx(TutorialContext.Provider, {\n    value: {\n      currentStep,\n      totalSteps: count,\n      lastStep: currentStep === count - 1,\n      previousStep: () => setStep(currentStep - 1),\n      nextStep: () => setStep(currentStep + 1),\n      skip: () => setStep(-1),\n      reset: () => setStep(1)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, children);\n}\nexport default function Tutorial(props) {\n  const {\n    step,\n    placement,\n    children\n  } = props;\n  const {\n    0: pose,\n    1: setPose\n  } = useState(null);\n  const {\n    currentStep,\n    previousStep,\n    nextStep,\n    lastStep,\n    skip,\n    totalSteps\n  } = useContext(TutorialContext);\n  useEffect(() => {\n    if (step !== currentStep) return;\n    const interval = setTimeout(() => setPose(\"attention\"), 100);\n    return () => clearInterval(interval);\n  }, [currentStep]);\n\n  if (step !== currentStep) {\n    return children ? __jsx(React.Fragment, null, children) : null;\n  }\n\n  const {\n    title,\n    body\n  } = steps[step];\n  return __jsx(Popover, {\n    body: __jsx(\"div\", {\n      className: \"flex flex-column b--yellow ba bw1 bg-white pa2 pa3-l br2 main-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"flex items-center justify-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, __jsx(Txt, {\n      size: TxtSize.MEDIUM,\n      value: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), step > 0 && __jsx(Txt, {\n      className: \"gray mr2\",\n      value: `${step} / ${totalSteps - 1}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"flex items-center mt2 mt4-l\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, __jsx(Txt, {\n      multiline: true,\n      className: \"mr4\",\n      value: body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), step === ITutorialStep.WELCOME && __jsx(React.Fragment, null, __jsx(Button, {\n      className: \"mr1 mr2-l\",\n      id: \"skip-tutorial\",\n      size: ButtonSize.TINY,\n      text: \"Skip\",\n      onClick: skip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), __jsx(Button, {\n      size: ButtonSize.TINY,\n      text: \"Go !\",\n      onClick: nextStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })), step !== ITutorialStep.WELCOME && __jsx(React.Fragment, null, step > 1 && __jsx(Button, {\n      className: \"mr1 mr2-l\",\n      size: ButtonSize.TINY,\n      text: \"<\",\n      onClick: previousStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), __jsx(Button, {\n      size: ButtonSize.TINY,\n      text: lastStep ? \"âœ“\" : \">\",\n      onClick: nextStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })))),\n    className: \"z-999\",\n    enterExitTransitionDurationMs: 0,\n    isOpen: true,\n    preferPlace: placement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(HighlightedArea, {\n    pose: pose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, children));\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/components/tutorial.tsx"],"names":["React","useContext","useEffect","useState","Popover","posed","Button","ButtonSize","Txt","TxtSize","TutorialContext","createContext","LocalStorageKey","HighlightedArea","div","attention","opacity","transition","type","stiffness","damping","ITutorialStep","steps","WELCOME","title","body","PLAYED_CARDS","DISCARD_PILE","SELF_PLAYER","OTHER_PLAYERS","HINT_TOKENS","STRIKE_TOKENS","TutorialProvider","props","children","currentStep","setCurrentStep","localStorage","getItem","setStep","step","setItem","toString","count","Object","keys","length","totalSteps","lastStep","previousStep","nextStep","skip","reset","Tutorial","placement","pose","setPose","interval","setTimeout","clearInterval","MEDIUM","TINY"],"mappings":"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","sourcesContent":["import React, { ReactNode, useContext, useEffect, useState } from \"react\";\nimport Popover, { PopoverPlace } from \"react-popover\";\nimport posed from \"react-pose\";\n\nimport Button, { ButtonSize } from \"~/components/ui/button\";\nimport Txt, { TxtSize } from \"~/components/ui/txt\";\n\nexport const TutorialContext = React.createContext(null);\n\nconst LocalStorageKey = \"tutorialStep\";\n\nconst HighlightedArea = posed.div({\n  attention: {\n    opacity: 0.7,\n    transition: {\n      type: \"spring\",\n      stiffness: 10,\n      damping: 0\n    }\n  }\n});\n\nexport enum ITutorialStep {\n  WELCOME = 0,\n  PLAYED_CARDS = 1,\n  DISCARD_PILE = 2,\n  SELF_PLAYER = 3,\n  OTHER_PLAYERS = 4,\n  HINT_TOKENS = 5,\n  STRIKE_TOKENS = 6\n}\n\nconst steps = {\n  [ITutorialStep.WELCOME]: {\n    title: \"Welcome!\",\n    body: \"Let's learn how to play\"\n  },\n  [ITutorialStep.PLAYED_CARDS]: {\n    title: \"Played cards\",\n    body:\n      \"This will nest the cards that have been played.\\nReach 5 on each color to win the game.\"\n  },\n  [ITutorialStep.DISCARD_PILE]: {\n    title: \"Discard\",\n    body:\n      \"This pile contains all the cards you discarded.\\nWatch out and avoid discarding the cards you need to finish the game.\"\n  },\n  [ITutorialStep.SELF_PLAYER]: {\n    title: \"Your game\",\n    body:\n      \"These are your cards.\\nYou can't see them, but other players can and will give you hints about them.\"\n  },\n  [ITutorialStep.OTHER_PLAYERS]: {\n    title: \"Teammates\",\n    body:\n      \"These are your teammates.\\nLike you, they can't see their cards.\\nGive them hints to help them play or discard cards\"\n  },\n  [ITutorialStep.HINT_TOKENS]: {\n    title: \"Hint tokens\",\n    body:\n      \"- Giving a hint costs 1 hint token.\\n- Discarding a card grants 1 hint token.\\n- Playing a 5 gives 1 hint token as a bonus\"\n  },\n  [ITutorialStep.STRIKE_TOKENS]: {\n    title: \"Strike tokens\",\n    body:\n      \"Playing a wrong card will discard it and cost you 1 strike token.\\nReaching 3 strike tokens will instantly lose the game.\"\n  }\n};\n\ninterface TutorialProviderProps {\n  children: ReactNode;\n}\n\nexport function TutorialProvider(props: TutorialProviderProps) {\n  const { children } = props;\n\n  const [currentStep, setCurrentStep] = useState(\n    +localStorage.getItem(LocalStorageKey) || ITutorialStep.WELCOME\n  );\n\n  function setStep(step: number) {\n    setCurrentStep(step);\n    localStorage.setItem(LocalStorageKey, step.toString());\n  }\n\n  const count = Object.keys(steps).length;\n\n  return (\n    <TutorialContext.Provider\n      value={{\n        currentStep,\n        totalSteps: count,\n        lastStep: currentStep === count - 1,\n        previousStep: () => setStep(currentStep - 1),\n        nextStep: () => setStep(currentStep + 1),\n        skip: () => setStep(-1),\n        reset: () => setStep(1)\n      }}\n    >\n      {children}\n    </TutorialContext.Provider>\n  );\n}\n\ninterface Props {\n  step: ITutorialStep;\n  placement?: PopoverPlace;\n  children?: ReactNode;\n}\n\nexport default function Tutorial(props: Props) {\n  const { step, placement, children } = props;\n\n  const [pose, setPose] = useState(null);\n  const {\n    currentStep,\n    previousStep,\n    nextStep,\n    lastStep,\n    skip,\n    totalSteps\n  } = useContext(TutorialContext);\n\n  useEffect(() => {\n    if (step !== currentStep) return;\n\n    const interval = setTimeout(() => setPose(\"attention\"), 100);\n\n    return () => clearInterval(interval);\n  }, [currentStep]);\n\n  if (step !== currentStep) {\n    return children ? <>{children}</> : null;\n  }\n\n  const { title, body } = steps[step];\n\n  return (\n    <Popover\n      body={\n        <div className=\"flex flex-column b--yellow ba bw1 bg-white pa2 pa3-l br2 main-dark\">\n          <span className=\"flex items-center justify-between\">\n            <Txt size={TxtSize.MEDIUM} value={title} />\n            {step > 0 && (\n              <Txt className=\"gray mr2\" value={`${step} / ${totalSteps - 1}`} />\n            )}\n          </span>\n          <div className=\"flex items-center mt2 mt4-l\">\n            <Txt multiline className=\"mr4\" value={body} />\n\n            {step === ITutorialStep.WELCOME && (\n              <>\n                <Button\n                  className=\"mr1 mr2-l\"\n                  id=\"skip-tutorial\"\n                  size={ButtonSize.TINY}\n                  text=\"Skip\"\n                  onClick={skip}\n                />\n                <Button size={ButtonSize.TINY} text=\"Go !\" onClick={nextStep} />\n              </>\n            )}\n\n            {step !== ITutorialStep.WELCOME && (\n              <>\n                {step > 1 && (\n                  <Button\n                    className=\"mr1 mr2-l\"\n                    size={ButtonSize.TINY}\n                    text=\"<\"\n                    onClick={previousStep}\n                  />\n                )}\n                <Button\n                  size={ButtonSize.TINY}\n                  text={lastStep ? \"âœ“\" : \">\"}\n                  onClick={nextStep}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      }\n      className=\"z-999\"\n      enterExitTransitionDurationMs={0}\n      isOpen={true}\n      preferPlace={placement}\n    >\n      <HighlightedArea pose={pose}>{children}</HighlightedArea>\n    </Popover>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}