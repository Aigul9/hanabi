{"ast":null,"code":"var _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/components/playedCards.tsx\";\nvar __jsx = React.createElement;\nimport { groupBy, last } from \"lodash\";\nimport React from \"react\";\nimport Card, { CardSize, CardWrapper, ICardContext } from \"./card\";\nimport Tutorial, { ITutorialStep } from \"./tutorial\";\nimport { getColors } from \"../game/actions\";\nimport { useGame } from \"../hooks/game\";\nexport default function PlayedCards(props) {\n  const {\n    cards\n  } = props;\n  const game = useGame();\n  const groupedCards = groupBy(cards, c => c.color);\n  const colors = getColors(game);\n  return __jsx(Tutorial, {\n    placement: \"below\",\n    step: ITutorialStep.PLAYED_CARDS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"flex flex-row mt1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, colors.map((color, i) => {\n    const topCard = last(groupedCards[color]);\n\n    if (!topCard) {\n      return __jsx(CardWrapper, {\n        key: i,\n        className: \"mr1\",\n        color: color,\n        size: CardSize.MEDIUM,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(CardWrapper, {\n      key: i,\n      className: \"mr1 relative\",\n      color: color,\n      size: CardSize.MEDIUM,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, groupedCards[color].map((card, i) => __jsx(Card, {\n      key: i,\n      card: card,\n      className: \"absolute\",\n      context: ICardContext.PLAYED,\n      size: CardSize.MEDIUM,\n      style: {\n        top: `-${i * 2}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })));\n  })));\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/components/playedCards.tsx"],"names":["groupBy","last","React","Card","CardSize","CardWrapper","ICardContext","Tutorial","ITutorialStep","getColors","useGame","PlayedCards","props","cards","game","groupedCards","c","color","colors","PLAYED_CARDS","map","i","topCard","MEDIUM","card","PLAYED","top"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,QAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,IAAeC,QAAf,EAAyBC,WAAzB,EAAsCC,YAAtC,QAA0D,QAA1D;AACA,OAAOC,QAAP,IAAmBC,aAAnB,QAAwC,YAAxC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,SAASC,OAAT,QAAwB,eAAxB;AAMA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAAmC;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AAEA,QAAME,IAAI,GAAGJ,OAAO,EAApB;AACA,QAAMK,YAAY,GAAGf,OAAO,CAACa,KAAD,EAAQG,CAAC,IAAIA,CAAC,CAACC,KAAf,CAA5B;AACA,QAAMC,MAAM,GAAGT,SAAS,CAACK,IAAD,CAAxB;AAEA,SACE,MAAC,QAAD;AAAU,IAAA,SAAS,EAAC,OAApB;AAA4B,IAAA,IAAI,EAAEN,aAAa,CAACW,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,MAAM,CAACE,GAAP,CAAW,CAACH,KAAD,EAAQI,CAAR,KAAc;AACxB,UAAMC,OAAO,GAAGrB,IAAI,CAACc,YAAY,CAACE,KAAD,CAAb,CAApB;;AAEA,QAAI,CAACK,OAAL,EAAc;AACZ,aACE,MAAC,WAAD;AACE,QAAA,GAAG,EAAED,CADP;AAEE,QAAA,SAAS,EAAC,KAFZ;AAGE,QAAA,KAAK,EAAEJ,KAHT;AAIE,QAAA,IAAI,EAAEb,QAAQ,CAACmB,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AACD,WACE,MAAC,WAAD;AACE,MAAA,GAAG,EAAEF,CADP;AAEE,MAAA,SAAS,EAAC,cAFZ;AAGE,MAAA,KAAK,EAAEJ,KAHT;AAIE,MAAA,IAAI,EAAEb,QAAQ,CAACmB,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGR,YAAY,CAACE,KAAD,CAAZ,CAAoBG,GAApB,CAAwB,CAACI,IAAD,EAAOH,CAAP,KACvB,MAAC,IAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,IAAI,EAAEG,IAFR;AAGE,MAAA,SAAS,EAAC,UAHZ;AAIE,MAAA,OAAO,EAAElB,YAAY,CAACmB,MAJxB;AAKE,MAAA,IAAI,EAAErB,QAAQ,CAACmB,MALjB;AAME,MAAA,KAAK,EAAE;AACLG,QAAAA,GAAG,EAAG,IAAGL,CAAC,GAAG,CAAE;AADV,OANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CANH,CADF;AAqBD,GAlCA,CADH,CADF,CADF;AAyCD","sourcesContent":["import { groupBy, last } from \"lodash\";\nimport React from \"react\";\n\nimport Card, { CardSize, CardWrapper, ICardContext } from \"~/components/card\";\nimport Tutorial, { ITutorialStep } from \"~/components/tutorial\";\nimport { getColors } from \"~/game/actions\";\nimport { ICard } from \"~/game/state\";\nimport { useGame } from \"~/hooks/game\";\n\ninterface Props {\n  cards: ICard[];\n}\n\nexport default function PlayedCards(props: Props) {\n  const { cards } = props;\n\n  const game = useGame();\n  const groupedCards = groupBy(cards, c => c.color);\n  const colors = getColors(game);\n\n  return (\n    <Tutorial placement=\"below\" step={ITutorialStep.PLAYED_CARDS}>\n      <div className=\"flex flex-row mt1\">\n        {colors.map((color, i) => {\n          const topCard = last(groupedCards[color]);\n\n          if (!topCard) {\n            return (\n              <CardWrapper\n                key={i}\n                className=\"mr1\"\n                color={color}\n                size={CardSize.MEDIUM}\n              />\n            );\n          }\n          return (\n            <CardWrapper\n              key={i}\n              className=\"mr1 relative\"\n              color={color}\n              size={CardSize.MEDIUM}\n            >\n              {groupedCards[color].map((card, i) => (\n                <Card\n                  key={i}\n                  card={card}\n                  className=\"absolute\"\n                  context={ICardContext.PLAYED}\n                  size={CardSize.MEDIUM}\n                  style={{\n                    top: `-${i * 2}px`\n                  }}\n                />\n              ))}\n            </CardWrapper>\n          );\n        })}\n      </div>\n    </Tutorial>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}