{"ast":null,"code":"var _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/pages/play.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { last, omit } from \"lodash\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport shortid from \"shortid\";\nimport { ActionAreaType } from \"../components/actionArea\";\nimport DiscardArea from \"../components/discardArea\";\nimport GameBoard from \"../components/gameBoard\";\nimport InstructionsArea from \"../components/instructionsArea\";\nimport LoadingScreen from \"../components/loadingScreen\";\nimport Lobby from \"../components/lobby\";\nimport MenuArea from \"../components/menuArea\";\nimport PlayersBoard from \"../components/playersBoard\";\nimport ReplayViewver from \"../components/replayViewer\";\nimport { TutorialProvider } from \"../components/tutorial\";\nimport Button, { ButtonSize } from \"../components/ui/button\";\nimport Txt, { TxtSize } from \"../components/ui/txt\";\nimport { commitAction, getMaximumPossibleScore, goBackToState, isReplayMode, joinGame } from \"../game/actions\";\nimport play from \"../game/ai\";\nimport { playSound } from \"../game/sound\";\nimport { GameMode, IGameStatus } from \"../game/state\";\nimport useConnectivity from \"../hooks/connectivity\";\nimport { GameContext, useCurrentPlayer, useSelfPlayer } from \"../hooks/game\";\nimport useNetwork from \"../hooks/network\";\nimport usePrevious from \"../hooks/previous\";\nexport default function Play() {\n  const network = useNetwork();\n  const router = useRouter();\n  const online = useConnectivity();\n  const {\n    0: game,\n    1: setGame\n  } = useState(null);\n  const {\n    0: interturn,\n    1: setInterturn\n  } = useState(false);\n  const {\n    0: selectedArea,\n    1: selectArea\n  } = useState({\n    id: \"instructions\",\n    type: ActionAreaType.INSTRUCTIONS\n  });\n  const {\n    gameId\n  } = router.query;\n  const currentPlayer = useCurrentPlayer(game);\n  const selfPlayer = useSelfPlayer(game);\n  /**\n   * Request notification permissions when game starts\n   */\n\n  useEffect(() => {\n    if (!game) return;\n    if (game.status !== IGameStatus.ONGOING) return;\n\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, [game && game.status === IGameStatus.ONGOING]);\n  /**\n   * Load game from database\n   */\n\n  useEffect(() => {\n    if (!online) return;\n    if (!gameId) return;\n    return network.subscribeToGame(gameId, game => {\n      if (!game) {\n        return router.push(\"/404\");\n      }\n\n      setGame(_objectSpread({}, game, {\n        synced: true\n      }));\n    });\n  }, [gameId, online]);\n  /**\n   * Resets the selected area when a player plays.\n   */\n\n  useEffect(() => {\n    if (!game) return;\n    selectArea({\n      id: \"instructions\",\n      type: ActionAreaType.INSTRUCTIONS\n    });\n  }, [game && game.turnsHistory.length]);\n  /**\n   * Toggle interturn state on new turn for pass & play\n   */\n\n  useEffect(() => {\n    if (!game) return;\n    if (game.options.gameMode !== GameMode.PASS_AND_PLAY) return;\n    if (game.players.length < game.options.playersCount) return;\n    if (game.status !== IGameStatus.ONGOING) return;\n    setInterturn(true);\n  }, [game && game.turnsHistory.length, game && game.players.length, game && game.status]);\n  /**\n   * Notify player it's time to play when document isn't focused.\n   */\n\n  useEffect(() => {\n    if (!currentPlayer) return;\n    if (currentPlayer !== selfPlayer) return;\n    if (document.hasFocus()) return;\n    const title = \"Your turn!\";\n    const options = {\n      icon: \"/static/hanabi-192.png\"\n    };\n\n    try {\n      // Attempt sending the notification through the Web API.\n      const notification = new Notification(title, options);\n\n      const onNotificationClick = () => {\n        window.focus();\n        notification.close();\n      };\n\n      let closeTimeout;\n\n      notification.onshow = () => {\n        closeTimeout = setTimeout(() => {\n          notification.close.bind(notification);\n        }, 20000);\n      };\n\n      notification.addEventListener(\"click\", onNotificationClick);\n      return () => {\n        notification.removeEventListener(\"click\", onNotificationClick);\n\n        if (closeTimeout) {\n          clearTimeout(closeTimeout);\n        }\n      };\n    } catch (e) {// Not handled for many mobile browsers.\n    }\n  }, [currentPlayer === selfPlayer]);\n  /**\n   * Handle notification sounds.\n   */\n\n  useEffect(() => {\n    if (!selfPlayer) return;\n    if (!selfPlayer.notified) return;\n    playSound(`/static/sounds.bell.mp3`);\n    const timeout = setTimeout(() => network.setNotification(game, selfPlayer, false), 10000);\n    return () => clearTimeout(timeout);\n  }, [selfPlayer && selfPlayer.notified]);\n  /**\n   * Play sound when gaining a hint token\n   */\n\n  const hintsCount = game ? game.tokens.hints : 0;\n  const previousHintsCount = usePrevious(hintsCount);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      playSound(`/static/sounds/coin.mp3`);\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [hintsCount === previousHintsCount + 1]);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      playSound(`/static/sounds/swoosh.wav`);\n    }, 200);\n    return () => clearTimeout(timeout);\n  }, [hintsCount === previousHintsCount - 1]);\n  const turnsCount = game ? game.turnsHistory.length : 0;\n  const previousTurnsCount = usePrevious(turnsCount);\n  useEffect(() => {\n    playSound(`/static/sounds/rewind.mp3`);\n  }, [turnsCount === previousTurnsCount - 1]);\n  /**\n   * Play sound when discarding a card\n   */\n\n  useEffect(() => {\n    if (!game) return;\n    playSound(`/static/sounds/card-scrape.mp3`);\n  }, [game && game.discardPile.length]);\n  /**\n   * Play sound when successfully playing a card\n   */\n\n  useEffect(() => {\n    if (!game) return;\n    const latestCard = last(game.playedCards);\n    if (!latestCard) return;\n    const path = latestCard.number === 5 ? `/static/sounds/play-5.mp3` : `/static/sounds/play.mp3`;\n    playSound(path);\n  }, [game && game.playedCards.length]);\n  /**\n   * Play for bots.\n   */\n\n  useEffect(() => {\n    if (!game) return;\n    if (!game.synced) return;\n    if (game.status !== IGameStatus.ONGOING) return;\n    if (!selfPlayer || selfPlayer.index) return;\n    if (!currentPlayer.bot) return;\n\n    if (game.options.botsWait === 0) {\n      network.updateGame(play(game));\n      return;\n    }\n\n    network.setReaction(game, currentPlayer, \"ðŸ§ \");\n    const timeout = setTimeout(() => {\n      network.updateGame(play(game));\n      game.options.botsWait && network.setReaction(game, currentPlayer, null);\n    }, game.options.botsWait);\n    return () => clearTimeout(timeout);\n  }, [game && game.currentPlayer, game && game.status, game && game.synced]);\n\n  function onJoinGame(player) {\n    const playerId = shortid();\n    const newState = joinGame(game, _objectSpread({\n      id: playerId\n    }, player));\n    setGame(_objectSpread({}, newState, {\n      synced: false\n    }));\n    network.updateGame(newState);\n    localStorage.setItem(\"gameId\", gameId.toString());\n\n    if (game.options.gameMode === GameMode.NETWORK) {\n      router.replace({\n        pathname: \"/play\",\n        query: {\n          gameId,\n          playerId\n        }\n      });\n      localStorage.setItem(\"playerId\", playerId.toString());\n    }\n  }\n\n  function onAddBot() {\n    const playerId = shortid();\n    const botsCount = game.players.filter(p => p.bot).length;\n    const bot = {\n      name: `AI #${botsCount + 1}`\n    };\n    const newState = joinGame(game, _objectSpread({\n      id: playerId\n    }, bot, {\n      bot: true\n    }));\n    setGame(_objectSpread({}, newState, {\n      synced: false\n    }));\n    network.updateGame(newState);\n  }\n\n  async function onStartGame() {\n    const newState = _objectSpread({}, game, {\n      status: IGameStatus.ONGOING\n    });\n\n    setGame(_objectSpread({}, newState, {\n      synced: false\n    }));\n    network.updateGame(newState);\n  }\n\n  async function onCommitAction(action) {\n    const newState = commitAction(game, action);\n    const misplay = getMaximumPossibleScore(game) !== getMaximumPossibleScore(newState);\n\n    if (game.options.preventLoss && misplay) {\n      if (!window.confirm(\"You fucked up Â· Keep going?\")) {\n        return;\n      }\n    }\n\n    if (game.options.gameMode === GameMode.PASS_AND_PLAY) {\n      setInterturn(true);\n    }\n\n    setGame(_objectSpread({}, newState, {\n      synced: false\n    }));\n    network.updateGame(newState);\n  }\n\n  function onCloseArea() {\n    selectArea({\n      id: \"instructions\",\n      type: ActionAreaType.INSTRUCTIONS\n    });\n  }\n\n  function onShowRollback() {\n    return selectArea({\n      id: \"rollback\",\n      type: ActionAreaType.ROLLBACK\n    });\n  }\n\n  async function onRollback() {\n    let lastNonAI = 1; // check whether the previous player is a bot\n    // adding players length to avoid a negative mod\n\n    let checkedPlayer = (game.players.length + game.currentPlayer - 1) % game.players.length;\n\n    while (game.players[checkedPlayer].bot && lastNonAI < game.players.length) {\n      lastNonAI += 1; // check the player even before\n\n      checkedPlayer = (game.currentPlayer + game.players.length - lastNonAI) % game.players.length;\n    }\n\n    network.updateGame(goBackToState(game, lastNonAI));\n  }\n\n  async function onNotifyPlayer(player) {\n    network.setNotification(game, player, true);\n  }\n\n  async function onReaction(reaction) {\n    network.setReaction(game, selfPlayer, reaction);\n  }\n  /*\n   * Area management functions\n   */\n\n\n  function onSelectArea(area) {\n    if (area.id === selectedArea.id) {\n      return selectArea({\n        id: \"instructions\",\n        type: ActionAreaType.INSTRUCTIONS\n      });\n    }\n\n    selectArea(area);\n  }\n\n  function onSelectPlayer(player, cardIndex) {\n    const self = player.id === selfPlayer.id;\n    onSelectArea({\n      id: self ? `game-${player.id}-${cardIndex}` : `game-${player.id}`,\n      type: self ? ActionAreaType.SELF_PLAYER : ActionAreaType.OTHER_PLAYER,\n      player,\n      cardIndex\n    });\n  }\n\n  function onSelectDiscard() {\n    onSelectArea({\n      id: \"discard\",\n      type: ActionAreaType.DISCARD\n    });\n  }\n\n  function onMenuClick() {\n    onSelectArea({\n      id: \"menu\",\n      type: ActionAreaType.MENU\n    });\n  }\n\n  function onReplay() {\n    network.updateGame(_objectSpread({}, game, {\n      replayCursor: game.turnsHistory.length - 1,\n      synced: false\n    }));\n  }\n\n  function onReplayCursorChange(replayCursor) {\n    network.updateGame(_objectSpread({}, game, {\n      replayCursor,\n      synced: false\n    }));\n  }\n\n  function onStopReplay() {\n    network.updateGame(_objectSpread({}, omit(game, [\"replayCursor\"]), {\n      synced: false\n    }));\n  }\n\n  if (!game) {\n    return __jsx(LoadingScreen, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(TutorialProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }, __jsx(GameContext.Provider, {\n    value: game,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"bg-main-dark relative flex flex-column w-100 h-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405\n    },\n    __self: this\n  }, __jsx(GameBoard, {\n    onMenuClick: onMenuClick,\n    onSelectDiscard: onSelectDiscard,\n    onShowRollback: onShowRollback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406\n    },\n    __self: this\n  }), isReplayMode(game) && __jsx(ReplayViewver, {\n    onReplayCursorChange: onReplayCursorChange,\n    onStopReplay: onStopReplay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"flex flex-column  shadow-5 bg-black-50 bb b--yellow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419\n    },\n    __self: this\n  }, selectedArea.type === ActionAreaType.MENU ? __jsx(\"div\", {\n    className: \"h4 pa2 ph3-l\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421\n    },\n    __self: this\n  }, __jsx(MenuArea, {\n    onCloseArea: onCloseArea,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422\n    },\n    __self: this\n  })) : game.status === IGameStatus.LOBBY ? __jsx(Lobby, {\n    onAddBot: onAddBot,\n    onJoinGame: onJoinGame,\n    onStartGame: onStartGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    className: \"h4 h5-l overflow-y-scroll pa2 ph3-l\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431\n    },\n    __self: this\n  }, selectedArea.type === ActionAreaType.ROLLBACK && __jsx(\"div\", {\n    className: \"h-100 flex flex-column items-center justify-center pa2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433\n    },\n    __self: this\n  }, __jsx(Txt, {\n    className: \"w-75\",\n    size: TxtSize.MEDIUM,\n    value: \"You're about to roll back the last action!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"mt4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, __jsx(Button, {\n    text: \"Abort\",\n    onClick: () => onCloseArea(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440\n    },\n    __self: this\n  }), __jsx(Button, {\n    primary: true,\n    className: \"ml4\",\n    text: \"Roll back\",\n    onClick: () => onRollback(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }))), selectedArea.type === ActionAreaType.DISCARD && __jsx(DiscardArea, {\n    onCloseArea: onCloseArea,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452\n    },\n    __self: this\n  }), ![ActionAreaType.ROLLBACK, ActionAreaType.DISCARD].includes(selectedArea.type) && __jsx(InstructionsArea, {\n    interturn: interturn,\n    onReplay: onReplay,\n    onSelectDiscard: onSelectDiscard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458\n    },\n    __self: this\n  }))), interturn && __jsx(\"div\", {\n    className: \"flex-grow-1 flex flex-column items-center justify-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469\n    },\n    __self: this\n  }, __jsx(Txt, {\n    size: TxtSize.MEDIUM,\n    value: `It's ${currentPlayer.name}'s turn!`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470\n    },\n    __self: this\n  }), __jsx(Button, {\n    primary: true,\n    className: \"mt4\",\n    size: ButtonSize.MEDIUM,\n    text: `Go !`,\n    onClick: () => setInterturn(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474\n    },\n    __self: this\n  })), !interturn && __jsx(\"div\", {\n    className: \"flex flex-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"h-100 overflow-y-scroll\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486\n    },\n    __self: this\n  }, __jsx(PlayersBoard, {\n    selectedArea: selectedArea,\n    onCloseArea: onCloseArea,\n    onCommitAction: onCommitAction,\n    onNotifyPlayer: onNotifyPlayer,\n    onReaction: onReaction,\n    onSelectPlayer: onSelectPlayer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/pages/play.tsx"],"names":["last","omit","useRouter","React","useEffect","useState","shortid","ActionAreaType","DiscardArea","GameBoard","InstructionsArea","LoadingScreen","Lobby","MenuArea","PlayersBoard","ReplayViewver","TutorialProvider","Button","ButtonSize","Txt","TxtSize","commitAction","getMaximumPossibleScore","goBackToState","isReplayMode","joinGame","play","playSound","GameMode","IGameStatus","useConnectivity","GameContext","useCurrentPlayer","useSelfPlayer","useNetwork","usePrevious","Play","network","router","online","game","setGame","interturn","setInterturn","selectedArea","selectArea","id","type","INSTRUCTIONS","gameId","query","currentPlayer","selfPlayer","status","ONGOING","Notification","permission","requestPermission","subscribeToGame","push","synced","turnsHistory","length","options","gameMode","PASS_AND_PLAY","players","playersCount","document","hasFocus","title","icon","notification","onNotificationClick","window","focus","close","closeTimeout","onshow","setTimeout","bind","addEventListener","removeEventListener","clearTimeout","e","notified","timeout","setNotification","hintsCount","tokens","hints","previousHintsCount","turnsCount","previousTurnsCount","discardPile","latestCard","playedCards","path","number","index","bot","botsWait","updateGame","setReaction","onJoinGame","player","playerId","newState","localStorage","setItem","toString","NETWORK","replace","pathname","onAddBot","botsCount","filter","p","name","onStartGame","onCommitAction","action","misplay","preventLoss","confirm","onCloseArea","onShowRollback","ROLLBACK","onRollback","lastNonAI","checkedPlayer","onNotifyPlayer","onReaction","reaction","onSelectArea","area","onSelectPlayer","cardIndex","self","SELF_PLAYER","OTHER_PLAYER","onSelectDiscard","DISCARD","onMenuClick","MENU","onReplay","replayCursor","onReplayCursorChange","onStopReplay","LOBBY","MEDIUM","includes"],"mappings":"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","sourcesContent":["import { last, omit } from \"lodash\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport shortid from \"shortid\";\n\nimport { ActionAreaType, ISelectedArea } from \"~/components/actionArea\";\nimport DiscardArea from \"~/components/discardArea\";\nimport GameBoard from \"~/components/gameBoard\";\nimport InstructionsArea from \"~/components/instructionsArea\";\nimport LoadingScreen from \"~/components/loadingScreen\";\nimport Lobby from \"~/components/lobby\";\nimport MenuArea from \"~/components/menuArea\";\nimport PlayersBoard from \"~/components/playersBoard\";\nimport ReplayViewver from \"~/components/replayViewer\";\nimport { TutorialProvider } from \"~/components/tutorial\";\nimport Button, { ButtonSize } from \"~/components/ui/button\";\nimport Txt, { TxtSize } from \"~/components/ui/txt\";\nimport {\n  commitAction,\n  getMaximumPossibleScore,\n  goBackToState,\n  isReplayMode,\n  joinGame\n} from \"~/game/actions\";\nimport play from \"~/game/ai\";\nimport { playSound } from \"~/game/sound\";\nimport IGameState, { GameMode, IGameStatus } from \"~/game/state\";\nimport useConnectivity from \"~/hooks/connectivity\";\nimport { GameContext, useCurrentPlayer, useSelfPlayer } from \"~/hooks/game\";\nimport useNetwork from \"~/hooks/network\";\nimport usePrevious from \"~/hooks/previous\";\n\nexport default function Play() {\n  const network = useNetwork();\n  const router = useRouter();\n  const online = useConnectivity();\n  const [game, setGame] = useState<IGameState>(null);\n  const [interturn, setInterturn] = useState(false);\n  const [selectedArea, selectArea] = useState<ISelectedArea>({\n    id: \"instructions\",\n    type: ActionAreaType.INSTRUCTIONS\n  });\n  const { gameId } = router.query;\n\n  const currentPlayer = useCurrentPlayer(game);\n  const selfPlayer = useSelfPlayer(game);\n\n  /**\n   * Request notification permissions when game starts\n   */\n  useEffect(() => {\n    if (!game) return;\n    if (game.status !== IGameStatus.ONGOING) return;\n\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, [game && game.status === IGameStatus.ONGOING]);\n\n  /**\n   * Load game from database\n   */\n  useEffect(() => {\n    if (!online) return;\n    if (!gameId) return;\n\n    return network.subscribeToGame(gameId as string, game => {\n      if (!game) {\n        return router.push(\"/404\");\n      }\n\n      setGame({ ...game, synced: true });\n    });\n  }, [gameId, online]);\n\n  /**\n   * Resets the selected area when a player plays.\n   */\n  useEffect(() => {\n    if (!game) return;\n\n    selectArea({ id: \"instructions\", type: ActionAreaType.INSTRUCTIONS });\n  }, [game && game.turnsHistory.length]);\n\n  /**\n   * Toggle interturn state on new turn for pass & play\n   */\n  useEffect(() => {\n    if (!game) return;\n    if (game.options.gameMode !== GameMode.PASS_AND_PLAY) return;\n    if (game.players.length < game.options.playersCount) return;\n    if (game.status !== IGameStatus.ONGOING) return;\n\n    setInterturn(true);\n  }, [\n    game && game.turnsHistory.length,\n    game && game.players.length,\n    game && game.status\n  ]);\n\n  /**\n   * Notify player it's time to play when document isn't focused.\n   */\n  useEffect(() => {\n    if (!currentPlayer) return;\n    if (currentPlayer !== selfPlayer) return;\n    if (document.hasFocus()) return;\n\n    const title = \"Your turn!\";\n    const options = {\n      icon: \"/static/hanabi-192.png\"\n    };\n\n    try {\n      // Attempt sending the notification through the Web API.\n      const notification = new Notification(title, options);\n\n      const onNotificationClick = () => {\n        window.focus();\n        notification.close();\n      };\n\n      let closeTimeout;\n      notification.onshow = () => {\n        closeTimeout = setTimeout(() => {\n          notification.close.bind(notification);\n        }, 20000);\n      };\n\n      notification.addEventListener(\"click\", onNotificationClick);\n\n      return () => {\n        notification.removeEventListener(\"click\", onNotificationClick);\n\n        if (closeTimeout) {\n          clearTimeout(closeTimeout);\n        }\n      };\n    } catch (e) {\n      // Not handled for many mobile browsers.\n    }\n  }, [currentPlayer === selfPlayer]);\n\n  /**\n   * Handle notification sounds.\n   */\n  useEffect(() => {\n    if (!selfPlayer) return;\n    if (!selfPlayer.notified) return;\n\n    playSound(`/static/sounds.bell.mp3`);\n    const timeout = setTimeout(\n      () => network.setNotification(game, selfPlayer, false),\n      10000\n    );\n\n    return () => clearTimeout(timeout);\n  }, [selfPlayer && selfPlayer.notified]);\n\n  /**\n   * Play sound when gaining a hint token\n   */\n  const hintsCount = game ? game.tokens.hints : 0;\n  const previousHintsCount = usePrevious(hintsCount);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      playSound(`/static/sounds/coin.mp3`);\n    }, 500);\n\n    return () => clearTimeout(timeout);\n  }, [hintsCount === previousHintsCount + 1]);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      playSound(`/static/sounds/swoosh.wav`);\n    }, 200);\n\n    return () => clearTimeout(timeout);\n  }, [hintsCount === previousHintsCount - 1]);\n\n  const turnsCount = game ? game.turnsHistory.length : 0;\n  const previousTurnsCount = usePrevious(turnsCount);\n  useEffect(() => {\n    playSound(`/static/sounds/rewind.mp3`);\n  }, [turnsCount === previousTurnsCount - 1]);\n\n  /**\n   * Play sound when discarding a card\n   */\n  useEffect(() => {\n    if (!game) return;\n\n    playSound(`/static/sounds/card-scrape.mp3`);\n  }, [game && game.discardPile.length]);\n\n  /**\n   * Play sound when successfully playing a card\n   */\n  useEffect(() => {\n    if (!game) return;\n\n    const latestCard = last(game.playedCards);\n    if (!latestCard) return;\n\n    const path =\n      latestCard.number === 5\n        ? `/static/sounds/play-5.mp3`\n        : `/static/sounds/play.mp3`;\n\n    playSound(path);\n  }, [game && game.playedCards.length]);\n\n  /**\n   * Play for bots.\n   */\n  useEffect(() => {\n    if (!game) return;\n    if (!game.synced) return;\n    if (game.status !== IGameStatus.ONGOING) return;\n    if (!selfPlayer || selfPlayer.index) return;\n    if (!currentPlayer.bot) return;\n\n    if (game.options.botsWait === 0) {\n      network.updateGame(play(game));\n      return;\n    }\n\n    network.setReaction(game, currentPlayer, \"ðŸ§ \");\n    const timeout = setTimeout(() => {\n      network.updateGame(play(game));\n      game.options.botsWait && network.setReaction(game, currentPlayer, null);\n    }, game.options.botsWait);\n\n    return () => clearTimeout(timeout);\n  }, [game && game.currentPlayer, game && game.status, game && game.synced]);\n\n  function onJoinGame(player) {\n    const playerId = shortid();\n    const newState = joinGame(game, { id: playerId, ...player });\n\n    setGame({ ...newState, synced: false });\n    network.updateGame(newState);\n\n    localStorage.setItem(\"gameId\", gameId.toString());\n\n    if (game.options.gameMode === GameMode.NETWORK) {\n      router.replace({\n        pathname: \"/play\",\n        query: { gameId, playerId }\n      });\n      localStorage.setItem(\"playerId\", playerId.toString());\n    }\n  }\n\n  function onAddBot() {\n    const playerId = shortid();\n    const botsCount = game.players.filter(p => p.bot).length;\n\n    const bot = {\n      name: `AI #${botsCount + 1}`\n    };\n    const newState = joinGame(game, { id: playerId, ...bot, bot: true });\n\n    setGame({ ...newState, synced: false });\n    network.updateGame(newState);\n  }\n\n  async function onStartGame() {\n    const newState = {\n      ...game,\n      status: IGameStatus.ONGOING\n    };\n\n    setGame({ ...newState, synced: false });\n    network.updateGame(newState);\n  }\n\n  async function onCommitAction(action) {\n    const newState = commitAction(game, action);\n    const misplay =\n      getMaximumPossibleScore(game) !== getMaximumPossibleScore(newState);\n    if (game.options.preventLoss && misplay) {\n      if (!window.confirm(\"You fucked up Â· Keep going?\")) {\n        return;\n      }\n    }\n\n    if (game.options.gameMode === GameMode.PASS_AND_PLAY) {\n      setInterturn(true);\n    }\n\n    setGame({ ...newState, synced: false });\n    network.updateGame(newState);\n  }\n\n  function onCloseArea() {\n    selectArea({\n      id: \"instructions\",\n      type: ActionAreaType.INSTRUCTIONS\n    });\n  }\n\n  function onShowRollback() {\n    return selectArea({\n      id: \"rollback\",\n      type: ActionAreaType.ROLLBACK\n    });\n  }\n\n  async function onRollback() {\n    let lastNonAI = 1;\n    // check whether the previous player is a bot\n    // adding players length to avoid a negative mod\n    let checkedPlayer =\n      (game.players.length + game.currentPlayer - 1) % game.players.length;\n    while (game.players[checkedPlayer].bot && lastNonAI < game.players.length) {\n      lastNonAI += 1;\n      // check the player even before\n      checkedPlayer =\n        (game.currentPlayer + game.players.length - lastNonAI) %\n        game.players.length;\n    }\n\n    network.updateGame(goBackToState(game, lastNonAI));\n  }\n\n  async function onNotifyPlayer(player) {\n    network.setNotification(game, player, true);\n  }\n\n  async function onReaction(reaction) {\n    network.setReaction(game, selfPlayer, reaction);\n  }\n\n  /*\n   * Area management functions\n   */\n\n  function onSelectArea(area: ISelectedArea) {\n    if (area.id === selectedArea.id) {\n      return selectArea({\n        id: \"instructions\",\n        type: ActionAreaType.INSTRUCTIONS\n      });\n    }\n\n    selectArea(area);\n  }\n\n  function onSelectPlayer(player, cardIndex) {\n    const self = player.id === selfPlayer.id;\n\n    onSelectArea({\n      id: self ? `game-${player.id}-${cardIndex}` : `game-${player.id}`,\n      type: self ? ActionAreaType.SELF_PLAYER : ActionAreaType.OTHER_PLAYER,\n      player,\n      cardIndex\n    });\n  }\n\n  function onSelectDiscard() {\n    onSelectArea({\n      id: \"discard\",\n      type: ActionAreaType.DISCARD\n    });\n  }\n\n  function onMenuClick() {\n    onSelectArea({\n      id: \"menu\",\n      type: ActionAreaType.MENU\n    });\n  }\n\n  function onReplay() {\n    network.updateGame({\n      ...game,\n      replayCursor: game.turnsHistory.length - 1,\n      synced: false\n    });\n  }\n\n  function onReplayCursorChange(replayCursor: number) {\n    network.updateGame({\n      ...game,\n      replayCursor,\n      synced: false\n    });\n  }\n\n  function onStopReplay() {\n    network.updateGame({\n      ...omit(game, [\"replayCursor\"]),\n      synced: false\n    });\n  }\n\n  if (!game) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <TutorialProvider>\n      <GameContext.Provider value={game}>\n        <div className=\"bg-main-dark relative flex flex-column w-100 h-100\">\n          <GameBoard\n            onMenuClick={onMenuClick}\n            onSelectDiscard={onSelectDiscard}\n            onShowRollback={onShowRollback}\n          />\n\n          {isReplayMode(game) && (\n            <ReplayViewver\n              onReplayCursorChange={onReplayCursorChange}\n              onStopReplay={onStopReplay}\n            />\n          )}\n\n          <div className=\"flex flex-column  shadow-5 bg-black-50 bb b--yellow\">\n            {selectedArea.type === ActionAreaType.MENU ? (\n              <div className=\"h4 pa2 ph3-l\">\n                <MenuArea onCloseArea={onCloseArea} />\n              </div>\n            ) : game.status === IGameStatus.LOBBY ? (\n              <Lobby\n                onAddBot={onAddBot}\n                onJoinGame={onJoinGame}\n                onStartGame={onStartGame}\n              />\n            ) : (\n              <div className=\"h4 h5-l overflow-y-scroll pa2 ph3-l\">\n                {selectedArea.type === ActionAreaType.ROLLBACK && (\n                  <div className=\"h-100 flex flex-column items-center justify-center pa2\">\n                    <Txt\n                      className=\"w-75\"\n                      size={TxtSize.MEDIUM}\n                      value=\"You're about to roll back the last action!\"\n                    />\n                    <div className=\"mt4\">\n                      <Button text=\"Abort\" onClick={() => onCloseArea()} />\n                      <Button\n                        primary\n                        className=\"ml4\"\n                        text=\"Roll back\"\n                        onClick={() => onRollback()}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {selectedArea.type === ActionAreaType.DISCARD && (\n                  <DiscardArea onCloseArea={onCloseArea} />\n                )}\n\n                {![ActionAreaType.ROLLBACK, ActionAreaType.DISCARD].includes(\n                  selectedArea.type\n                ) && (\n                  <InstructionsArea\n                    interturn={interturn}\n                    onReplay={onReplay}\n                    onSelectDiscard={onSelectDiscard}\n                  />\n                )}\n              </div>\n            )}\n          </div>\n\n          {interturn && (\n            <div className=\"flex-grow-1 flex flex-column items-center justify-center\">\n              <Txt\n                size={TxtSize.MEDIUM}\n                value={`It's ${currentPlayer.name}'s turn!`}\n              />\n              <Button\n                primary\n                className=\"mt4\"\n                size={ButtonSize.MEDIUM}\n                text={`Go !`}\n                onClick={() => setInterturn(false)}\n              />\n            </div>\n          )}\n\n          {!interturn && (\n            <div className=\"flex flex-column\">\n              <div className=\"h-100 overflow-y-scroll\">\n                <PlayersBoard\n                  selectedArea={selectedArea}\n                  onCloseArea={onCloseArea}\n                  onCommitAction={onCommitAction}\n                  onNotifyPlayer={onNotifyPlayer}\n                  onReaction={onReaction}\n                  onSelectPlayer={onSelectPlayer}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </GameContext.Provider>\n    </TutorialProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}