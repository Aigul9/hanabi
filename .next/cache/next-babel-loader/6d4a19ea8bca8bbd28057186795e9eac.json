{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _TxtSizes,\n    _jsxFileName = \"/Users/sarahmamy/Workspace/hanabi/src/components/ui/txt.tsx\";\n\nvar __jsx = React.createElement;\nimport classnames from \"classnames\";\nimport React from \"react\";\nexport var TxtSize;\n\n(function (TxtSize) {\n  TxtSize[\"SMALL\"] = \"small\";\n  TxtSize[\"MEDIUM\"] = \"medium\";\n  TxtSize[\"LARGE\"] = \"large\";\n})(TxtSize || (TxtSize = {}));\n\nvar TxtSizes = (_TxtSizes = {}, _defineProperty(_TxtSizes, TxtSize.SMALL, \"f6 f4-l\"), _defineProperty(_TxtSizes, TxtSize.MEDIUM, \"f4 f3-l\"), _defineProperty(_TxtSizes, TxtSize.LARGE, \"ttu f2 f1-l tracked\"), _TxtSizes);\nexport default function Txt(props) {\n  var _props$size = props.size,\n      size = _props$size === void 0 ? TxtSize.SMALL : _props$size,\n      _props$italic = props.italic,\n      italic = _props$italic === void 0 ? false : _props$italic,\n      _props$uppercase = props.uppercase,\n      uppercase = _props$uppercase === void 0 ? false : _props$uppercase,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      content = props.value,\n      children = props.children,\n      className = props.className,\n      attributes = _objectWithoutProperties(props, [\"size\", \"italic\", \"uppercase\", \"multiline\", \"value\", \"children\", \"className\"]);\n\n  return __jsx(\"span\", _extends({\n    className: classnames(TxtSizes[size], {\n      ttu: uppercase\n    }, {\n      i: italic\n    }, {\n      \"pre-line\": multiline\n    }, className)\n  }, attributes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), content !== undefined ? content : children);\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/components/ui/txt.tsx"],"names":["classnames","React","TxtSize","TxtSizes","SMALL","MEDIUM","LARGE","Txt","props","size","italic","uppercase","multiline","content","value","children","className","attributes","ttu","i","undefined"],"mappings":";;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAiD,OAAjD;AAEA,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;GAAAA,O,KAAAA,O;;AAMZ,IAAMC,QAAQ,+CACXD,OAAO,CAACE,KADG,EACK,SADL,8BAEXF,OAAO,CAACG,MAFG,EAEM,SAFN,8BAGXH,OAAO,CAACI,KAHG,EAGK,qBAHL,aAAd;AAcA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAA2B;AAAA,oBAUpCA,KAVoC,CAEtCC,IAFsC;AAAA,MAEtCA,IAFsC,4BAE/BP,OAAO,CAACE,KAFuB;AAAA,sBAUpCI,KAVoC,CAGtCE,MAHsC;AAAA,MAGtCA,MAHsC,8BAG7B,KAH6B;AAAA,yBAUpCF,KAVoC,CAItCG,SAJsC;AAAA,MAItCA,SAJsC,iCAI1B,KAJ0B;AAAA,yBAUpCH,KAVoC,CAKtCI,SALsC;AAAA,MAKtCA,SALsC,iCAK1B,KAL0B;AAAA,MAM/BC,OAN+B,GAUpCL,KAVoC,CAMtCM,KANsC;AAAA,MAOtCC,QAPsC,GAUpCP,KAVoC,CAOtCO,QAPsC;AAAA,MAQtCC,SARsC,GAUpCR,KAVoC,CAQtCQ,SARsC;AAAA,MASnCC,UATmC,4BAUpCT,KAVoC;;AAYxC,SACE;AACE,IAAA,SAAS,EAAER,UAAU,CACnBG,QAAQ,CAACM,IAAD,CADW,EAEnB;AAAES,MAAAA,GAAG,EAAEP;AAAP,KAFmB,EAGnB;AAAEQ,MAAAA,CAAC,EAAET;AAAL,KAHmB,EAInB;AAAE,kBAAYE;AAAd,KAJmB,EAKnBI,SALmB;AADvB,KAQMC,UARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUGJ,OAAO,KAAKO,SAAZ,GAAwBP,OAAxB,GAAkCE,QAVrC,CADF;AAcD","sourcesContent":["import classnames from \"classnames\";\nimport React, { HTMLAttributes, ReactNode } from \"react\";\n\nexport enum TxtSize {\n  SMALL = \"small\",\n  MEDIUM = \"medium\",\n  LARGE = \"large\"\n}\n\nconst TxtSizes = {\n  [TxtSize.SMALL]: \"f6 f4-l\",\n  [TxtSize.MEDIUM]: \"f4 f3-l\",\n  [TxtSize.LARGE]: \"ttu f2 f1-l tracked\"\n};\n\ninterface Props extends HTMLAttributes<HTMLSpanElement> {\n  italic?: boolean;\n  uppercase?: boolean;\n  multiline?: boolean;\n  size?: TxtSize;\n  value?: ReactNode;\n}\n\nexport default function Txt(props: Props) {\n  const {\n    size = TxtSize.SMALL,\n    italic = false,\n    uppercase = false,\n    multiline = false,\n    value: content,\n    children,\n    className,\n    ...attributes\n  } = props;\n\n  return (\n    <span\n      className={classnames(\n        TxtSizes[size],\n        { ttu: uppercase },\n        { i: italic },\n        { \"pre-line\": multiline },\n        className\n      )}\n      {...attributes}\n    >\n      {content !== undefined ? content : children}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}