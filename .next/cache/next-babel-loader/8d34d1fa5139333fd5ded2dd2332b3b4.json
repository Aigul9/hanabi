{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useRouter } from \"next/router\";\nimport React, { useContext } from \"react\";\nimport { isReplayMode } from \"../game/actions\";\nimport { fillEmptyValues, GameMode, IGameStatus } from \"../game/state\";\nexport var GameContext = React.createContext(null);\nexport function useGame() {\n  var game = useContext(GameContext);\n\n  if (isReplayMode(game)) {\n    return _objectSpread({}, fillEmptyValues(game.history[game.replayCursor]), {\n      originalGame: game,\n      status: IGameStatus.OVER,\n      replayCursor: game.replayCursor\n    });\n  }\n\n  return game;\n}\nexport function useCurrentPlayer() {\n  var game = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : useGame();\n\n  if (!game) {\n    return null;\n  }\n\n  return game.players[game.currentPlayer];\n}\nexport function useSelfPlayer() {\n  var game = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : useGame();\n  var router = useRouter();\n  var currentPlayer = useCurrentPlayer(game);\n  var playerId = router.query.playerId;\n\n  if (!game) {\n    return null;\n  }\n\n  if (game.options.gameMode === GameMode.NETWORK) {\n    return game.players.find(function (p) {\n      return p.id === playerId;\n    });\n  }\n\n  if (game.options.gameMode === GameMode.PASS_AND_PLAY) {\n    return currentPlayer;\n  }\n}","map":{"version":3,"sources":["/Users/sarahmamy/Workspace/hanabi/src/hooks/game.ts"],"names":["useRouter","React","useContext","isReplayMode","fillEmptyValues","GameMode","IGameStatus","GameContext","createContext","useGame","game","history","replayCursor","originalGame","status","OVER","useCurrentPlayer","players","currentPlayer","useSelfPlayer","router","playerId","query","options","gameMode","NETWORK","find","p","id","PASS_AND_PLAY"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SACEC,eADF,EAEEC,QAFF,EAGEC,WAHF,QAIO,eAJP;AAMA,OAAO,IAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoB,IAApB,CAApB;AAEP,OAAO,SAASC,OAAT,GAAmB;AACxB,MAAMC,IAAI,GAAGR,UAAU,CAAaK,WAAb,CAAvB;;AAEA,MAAIJ,YAAY,CAACO,IAAD,CAAhB,EAAwB;AACtB,6BACKN,eAAe,CAACM,IAAI,CAACC,OAAL,CAAaD,IAAI,CAACE,YAAlB,CAAD,CADpB;AAEEC,MAAAA,YAAY,EAAEH,IAFhB;AAGEI,MAAAA,MAAM,EAAER,WAAW,CAACS,IAHtB;AAIEH,MAAAA,YAAY,EAAEF,IAAI,CAACE;AAJrB;AAMD;;AAED,SAAOF,IAAP;AACD;AAED,OAAO,SAASM,gBAAT,GAAwD;AAAA,MAA9BN,IAA8B,uEAAXD,OAAO,EAAI;;AAC7D,MAAI,CAACC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SAAOA,IAAI,CAACO,OAAL,CAAaP,IAAI,CAACQ,aAAlB,CAAP;AACD;AAED,OAAO,SAASC,aAAT,GAAqD;AAAA,MAA9BT,IAA8B,uEAAXD,OAAO,EAAI;AAC1D,MAAMW,MAAM,GAAGpB,SAAS,EAAxB;AACA,MAAMkB,aAAa,GAAGF,gBAAgB,CAACN,IAAD,CAAtC;AAF0D,MAIlDW,QAJkD,GAIrCD,MAAM,CAACE,KAJ8B,CAIlDD,QAJkD;;AAM1D,MAAI,CAACX,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,MAAIA,IAAI,CAACa,OAAL,CAAaC,QAAb,KAA0BnB,QAAQ,CAACoB,OAAvC,EAAgD;AAC9C,WAAOf,IAAI,CAACO,OAAL,CAAaS,IAAb,CAAkB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,EAAF,KAASP,QAAb;AAAA,KAAnB,CAAP;AACD;;AAED,MAAIX,IAAI,CAACa,OAAL,CAAaC,QAAb,KAA0BnB,QAAQ,CAACwB,aAAvC,EAAsD;AACpD,WAAOX,aAAP;AACD;AACF","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useContext } from \"react\";\n\nimport { isReplayMode } from \"~/game/actions\";\nimport IGameState, {\n  fillEmptyValues,\n  GameMode,\n  IGameStatus\n} from \"~/game/state\";\n\nexport const GameContext = React.createContext(null);\n\nexport function useGame() {\n  const game = useContext<IGameState>(GameContext);\n\n  if (isReplayMode(game)) {\n    return {\n      ...fillEmptyValues(game.history[game.replayCursor]),\n      originalGame: game,\n      status: IGameStatus.OVER,\n      replayCursor: game.replayCursor\n    };\n  }\n\n  return game;\n}\n\nexport function useCurrentPlayer(game: IGameState = useGame()) {\n  if (!game) {\n    return null;\n  }\n\n  return game.players[game.currentPlayer];\n}\n\nexport function useSelfPlayer(game: IGameState = useGame()) {\n  const router = useRouter();\n  const currentPlayer = useCurrentPlayer(game);\n\n  const { playerId } = router.query;\n\n  if (!game) {\n    return null;\n  }\n\n  if (game.options.gameMode === GameMode.NETWORK) {\n    return game.players.find(p => p.id === playerId);\n  }\n\n  if (game.options.gameMode === GameMode.PASS_AND_PLAY) {\n    return currentPlayer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}